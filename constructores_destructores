# "Consideremos una clase Articulo que simula la apertura y cierre de una base de datos de investigación,
como podría ser un archivo en línea:

class Articulo:
    def __init__(self, autor, titulo, articulo, volumen, numero, paginas):
        self.autor = autor
        self.titulo = titulo
        self.articulo = articulo
        self.volumen = volumen
        self.numero = numero
        self.paginas = paginas
        print(f"Articulo {self.autor} {self.titulo} {self.articulo} {self.volumen} {self.numero} {self.paginas} inicializado.")

    def __del__(self):
        print(f"Articulo {self.autor} {self.titulo} {self.articulo} {self.volumen} {self.numero} {self.paginas} liberado.")

# "Aquí, el constructor __init__ se encarga de inicializar el objeto Articulo; mientras que,
el destructor __del__ se encarga de liberarlo.

# Al crear y eliminar instancias de Articulo, se pueden observar las acciones de los constructores y destructores:

mi_articulo = Articulo("Johanna Galarza y Ronny Carriel", "Evolución de los sistemas de lenguaje de programación a lo largo de la historia",
"E-IDEA Journal of Engineering Science", "4", "10", "14-26")
del mi_articulo

# La instancia mi_articulo de la clase Articulo es creada y luego eliminada.
# Esto desencadena primero el constructor y luego el destructor, gestionando adecuadamente la vida útil del articulo.
